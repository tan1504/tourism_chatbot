from flask import Flask, request, jsonify, render_template
import os
from dotenv import load_dotenv
from database import DatabaseManager
from gemini_handler import GeminiChatbot
import json

# Load environment variables
load_dotenv()

app = Flask(__name__)

# Kh·ªüi t·∫°o database manager
db = DatabaseManager(
    server=os.getenv('DB_SERVER', 'localhost'),
    database=os.getenv('DB_NAME', 'TourismChatbot'),
    username=os.getenv('DB_USERNAME'),
    password=os.getenv('DB_PASSWORD'),
    trusted_connection=os.getenv('DB_TRUSTED_CONNECTION', 'true').lower() == 'true'
)

# Kh·ªüi t·∫°o Gemini chatbot
gemini_api_key = os.getenv('GEMINI_API_KEY')
if not gemini_api_key:
    raise ValueError("GEMINI_API_KEY environment variable is required")

chatbot = GeminiChatbot(gemini_api_key)

@app.route('/')
def home():
    """Trang ch·ªß"""
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    """API endpoint cho chatbot"""
    try:
        data = request.get_json()
        user_message = data.get('message', '').strip()
        
        if not user_message:
            return jsonify({
                'success': False,
                'message': 'Vui l√≤ng nh·∫≠p tin nh·∫Øn'
            })
        
        # Ph√°t hi·ªán ng√¥n ng·ªØ
        language = chatbot.detect_language(user_message)
        
        # Tr√≠ch xu·∫•t t·ª´ kh√≥a v√† √Ω ƒë·ªãnh
        extracted_info = chatbot.extract_keywords(user_message, language)
        
        # T√¨m ki·∫øm d·ªØ li·ªáu d·ª±a tr√™n ch·ªß ƒë·ªÅ
        search_results = []
        topic = extracted_info.get('topic', 'general')
        keywords = extracted_info.get('keywords', [])
        
        if topic == 'destinations' and keywords:
            for keyword in keywords:
                results = db.search_destinations(keyword, language)
                search_results.extend(results)
        elif topic == 'culture' and keywords:
            for keyword in keywords:
                results = db.search_culture(keyword, language)
                search_results.extend(results)
        elif topic == 'cuisine' and keywords:
            for keyword in keywords:
                results = db.search_cuisine(keyword, language)
                search_results.extend(results)
        elif topic == 'activities' and keywords:
            for keyword in keywords:
                results = db.search_activities(keyword, language)
                search_results.extend(results)
        elif topic == 'hotels' and keywords:
            for keyword in keywords:
                results = db.search_hotels(keyword, language)
                search_results.extend(results)
        elif topic == 'transportation' and keywords:
            if len(keywords) >= 2:
                origin = keywords[0]
                destination = keywords[1]
            else:
                origin = "TP.H·ªì Ch√≠ Minh" if language == "vi" else "Ho Chi Minh City"
                destination = keywords[0]
            results = db.search_transportation(origin, destination, language)
            search_results.extend(results)
        elif topic == 'restaurants' and keywords:
            for keyword in keywords:
                results = db.search_restaurants(keyword, language)
                search_results.extend(results)
        elif topic == "trip_cost_estimation":
            destination = extracted_info.get("destination", "")
            people = int(extracted_info.get("people", 1))  # n·∫øu user kh√¥ng n√≥i r√µ th√¨ m·∫∑c ƒë·ªãnh = 1
            days = int(extracted_info.get("days", 1))

            # --- Query d·ªØ li·ªáu t·ª´ SQL ---
            transport = db.search_transportation("TP.H·ªì Ch√≠ Minh", destination, language)
            hotels = db.search_hotels(destination, language)
            restaurants = db.search_restaurants(destination, language)
            activities = db.search_activities(destination, language)

            # Gom data context
            data_context = {
                "transportation": transport[:3],   # l·∫•y t·ªëi ƒëa 3 g·ª£i √Ω
                "hotels": hotels[:3],
                "restaurants": restaurants[:3],
                "activities": activities[:3],
                "people": people,
                "days": days
            }

            # --- Prompt cho Gemini ---
            prompt = f"""
        Ng∆∞·ªùi d√πng h·ªèi v·ªÅ chi ph√≠ chuy·∫øn ƒëi: {destination}, {days} ng√†y, {people} ng∆∞·ªùi.

        D·ªØ li·ªáu t·ª´ SQL database:
        {json.dumps(data_context, ensure_ascii=False, indent=2)}

        Y√™u c·∫ßu b·∫°n ph·∫£i:
        1. üöç Di chuy·ªÉn: 
        - N·∫øu c√≥ d·ªØ li·ªáu trong "transportation" th√¨ ch·ªçn 1 ph∆∞∆°ng √°n ph√π h·ª£p.
        - T√≠nh chi ph√≠ trung b√¨nh = (cost_min + cost_max)/2 √ó s·ªë ng∆∞·ªùi.
        - N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ fallback: 400k/ng∆∞·ªùi/chi·ªÅu √ó 2 chi·ªÅu.
        2. üè® L∆∞u tr√∫:
        - N·∫øu c√≥ "hotels" th√¨ ch·ªçn 1 kh√°ch s·∫°n, l·∫•y price_range (ch·ªçn gi√° trung b√¨nh) √ó s·ªë ƒë√™m.
        - N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ fallback: 500k/ƒë√™m √ó {days} ƒë√™m.
        3. üçΩÔ∏è ƒÇn u·ªëng:
        - Fallback m·∫∑c ƒë·ªãnh: 300k/ng∆∞·ªùi/ng√†y √ó {people} √ó {days}.
        4. üó∫Ô∏è Ho·∫°t ƒë·ªông / tham quan:
        - N·∫øu c√≥ "activities" c√≥ price_range th√¨ t√≠nh gi√° trung b√¨nh.
        - N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ fallback: 200k/ng∆∞·ªùi/ng√†y √ó {people} √ó {days}.
        5. üëâ Cu·ªëi c√πng: c·ªông t·∫•t c·∫£ v√† hi·ªÉn th·ªã **T·ªïng chi ph√≠ d·ª± ki·∫øn (VND)**.

        ‚ö†Ô∏è B·∫Øt bu·ªôc:
        - Ph·∫£i in s·ªë ti·ªÅn r√µ r√†ng, c√≥ d·∫•u ph·∫©y ph√¢n c√°ch (vd: 2,400,000 VND).
        - Kh√¥ng ƒë∆∞·ª£c tr·∫£ l·ªùi ki·ªÉu "kh√¥ng c√≥ d·ªØ li·ªáu".
        - Tr·∫£ l·ªùi b·∫±ng ti·∫øng {"Vi·ªát" if language == "vi" else "Anh"}.
        """

            response = chatbot.model.generate_content(prompt)
            response_text = response.text.strip()

            return jsonify({
                "success": True,
                "message": response_text,
                "topic": topic,
                "language": language
            })

        elif topic == 'general':
            # T√¨m ki·∫øm t·ªïng h·ª£p n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ch·ªß ƒë·ªÅ c·ª• th·ªÉ
            for keyword in keywords:
                search_results.extend(db.search_destinations(keyword, language))
                search_results.extend(db.search_culture(keyword, language))
                search_results.extend(db.search_cuisine(keyword, language))
                search_results.extend(db.search_hotels(keyword, language))
                search_results.extend(db.search_restaurants(keyword, language))
                search_results.extend(db.search_transportation(keyword, language))
                search_results.extend(db.search_activities(keyword, language))
        
        # Lo·∫°i b·ªè k·∫øt qu·∫£ tr√πng l·∫∑p
        unique_results = []
        seen_ids = set()
        for result in search_results:
            # T·∫°o unique key d·ª±a tr√™n table v√† id
            if 'dish_name_vi' in result:
                unique_key = f"cuisine_{result.get('id')}"
            elif 'activity_name_vi' in result:
                unique_key = f"activity_{result.get('id')}"
            elif 'hotel_name_vi' in result:
                unique_key = f"hotel_{result.get('id')}"
            elif 'restaurant_name_vi' in result:
                unique_key = f"restaurant_{result.get('id')}"
            elif 'transport_type' in result:
                unique_key = f"transportation_{result.get('id')}"
            elif 'name_vi' in result and 'rating' in result:
                unique_key = f"destination_{result.get('id')}"
            else:
                unique_key = f"culture_{result.get('id')}"
            
            if unique_key not in seen_ids:
                seen_ids.add(unique_key)
                unique_results.append(result)
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£
        search_results = unique_results[:5]
        
        # T·∫°o ph·∫£n h·ªìi b·∫±ng Gemini
        if search_results:
            response_text = chatbot.generate_response(user_message, search_results, language)
        else:
            response_text = chatbot.generate_recommendations(topic, language)
        
        return jsonify({
            'success': True,
            'message': response_text,
            'topic': topic,
            'results_count': len(search_results),
            'language': language
        })
        
    except Exception as e:
        print(f"Chat API error: {e}")
        return jsonify({
            'success': False,
            'message': 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.' if 'vi' in str(e).lower() else 'An error occurred. Please try again later.'
        })

@app.route('/api/destinations')
def get_destinations():
    """L·∫•y danh s√°ch ƒëi·ªÉm ƒë·∫øn"""
    try:
        destinations = db.get_all_destinations()
        return jsonify({
            'success': True,
            'data': destinations
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error: {str(e)}'
        })

@app.route('/api/search/<topic>')
def search_by_topic(topic):
    """T√¨m ki·∫øm theo ch·ªß ƒë·ªÅ"""
    try:
        keyword = request.args.get('q', '')
        language = request.args.get('lang', 'vi')
        
        if not keyword:
            return jsonify({
                'success': False,
                'message': 'Keyword is required'
            })
        
        results = []
        if topic == 'destinations':
            results = db.search_destinations(keyword, language)
        elif topic == 'culture':
            results = db.search_culture(keyword, language)
        elif topic == 'cuisine':
            results = db.search_cuisine(keyword, language)
        elif topic == 'hotels':
            results = db.search_hotels(keyword, language)
        elif topic == 'restaurants':
            results = db.search_restaurants(keyword, language)
        elif topic == 'transportation':
            origin = request.args.get('origin', '')
            destination = request.args.get('destination', '')
            results = db.search_transportation(origin, destination, language)
        elif topic == 'activities':
            results = db.search_activities(keyword, language)
        
        return jsonify({
            'success': True,
            'data': results,
            'topic': topic,
            'keyword': keyword
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error: {str(e)}'
        })

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    try:
        # Test database connection
        test_query = "SELECT 1 as test"
        db.execute_query(test_query)
        
        return jsonify({
            'success': True,
            'message': 'System is healthy',
            'database': 'connected',
            'gemini': 'configured'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Health check failed: {str(e)}'
        })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
