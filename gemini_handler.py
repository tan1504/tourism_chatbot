import google.generativeai as genai
import json
import re
from typing import Dict, List, Any

class GeminiChatbot:
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
        
    def detect_language(self, text: str) -> str:
        """Ph√°t hi·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n"""
        vietnamese_chars = re.findall(r'[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]', text.lower())
        if len(vietnamese_chars) > 0:
            return 'vi'
        return 'en'
    
    def extract_keywords(self, user_message: str, language: str = 'vi') -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t t·ª´ kh√≥a, origin v√† destination t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng"""
        if language == 'vi':
            prompt = f"""
            Ph√¢n t√≠ch c√¢u h·ªèi sau v√† tr√≠ch xu·∫•t th√¥ng tin:
            "{user_message}"

            H√£y x√°c ƒë·ªãnh:
            1. Ch·ªß ƒë·ªÅ ch√≠nh (destinations/culture/cuisine/activities/hotels/restaurants/transportation/general)
            2. ƒêi·ªÉm xu·∫•t ph√°t (origin) n·∫øu c√≥ trong c√¢u h·ªèi. N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ "TP.H·ªì Ch√≠ Minh".
            3. ƒêi·ªÉm ƒë·∫øn (destination) n·∫øu c√≥ trong c√¢u h·ªèi.
            4. T·ª´ kh√≥a t√¨m ki·∫øm (c√°c ƒë·ªãa danh, m√≥n ƒÉn, l·ªÖ h·ªôi, v.v.)
            5. Lo·∫°i th√¥ng tin c·∫ßn t√¨m (m√¥ t·∫£/gi√° c·∫£/th·ªùi gian/ƒë·ªãa ƒëi·ªÉm)

            Tr·∫£ v·ªÅ JSON format:
            {{
                "topic": "destinations|culture|cuisine|activities|hotels|restaurants|transportation|general",
                "origin": "TP.H·ªì Ch√≠ Minh",
                "destination": "ƒê√† L·∫°t",
                "keywords": ["keyword1", "keyword2"],
                "info_type": "description|price|time|location|recommendation",
                "language": "vi"
            }}
            """
        else:
            prompt = f"""
            Analyze the following question and extract information:
            "{user_message}"

            Please identify:
            1. Main topic (destinations/culture/cuisine/activities/hotels/restaurants/transportation/general)
            2. Origin (if mentioned). If not, default to "Ho Chi Minh City".
            3. Destination (if mentioned).
            4. Search keywords (places, food, festivals, etc.)
            5. Type of information needed (description/price/time/location)

            Return in JSON format:
            {{
                "topic": "destinations|culture|cuisine|activities|hotels|restaurants|transportation|general",
                "origin": "Ho Chi Minh City",
                "destination": "Da Lat",
                "keywords": ["keyword1", "keyword2"],
                "info_type": "description|price|time|location|recommendation",
                "language": "en"
            }}
            """

        try:
            response = self.model.generate_content(prompt)
            # Parse JSON t·ª´ response
            json_match = re.search(r'\{.*\}', response.text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            else:
                # Fallback parsing
                return self.fallback_keyword_extraction(user_message, language)
        except Exception as e:
            print(f"Gemini keyword extraction error: {e}")
            return self.fallback_keyword_extraction(user_message, language)
    
    def fallback_keyword_extraction(self, user_message: str, language: str) -> Dict[str, Any]:
        """Ph∆∞∆°ng ph√°p fallback ƒë·ªÉ tr√≠ch xu·∫•t t·ª´ kh√≥a"""
        message_lower = user_message.lower()
        
        # C√°c nh√≥m t·ª´ kh√≥a
        destination_keywords = ['du l·ªãch', 'ƒëi·ªÉm ƒë·∫øn', 'thƒÉm', 'ƒëi', 'travel', 'visit', 'destination', 'place']
        culture_keywords = ['vƒÉn h√≥a', 'l·ªÖ h·ªôi', 'truy·ªÅn th·ªëng', 'culture', 'festival', 'tradition']
        cuisine_keywords = ['ƒÉn', 'm√≥n', '·∫©m th·ª±c', 'food', 'dish', 'cuisine', 'eat']
        hotel_keywords = ['kh√°ch s·∫°n', 'ngh·ªâ d∆∞·ª°ng', 'hotel', 'resort', 'stay', 'accommodation']
        restaurant_keywords = ['nh√† h√†ng', 'qu√°n ƒÉn', 'restaurant', 'dining', 'food place']
        activity_keywords = ['ho·∫°t ƒë·ªông', 'l√†m g√¨', 'ch∆°i g√¨', 'tr·∫£i nghi·ªám', 'activity', 'activities', 'experience', 'do', 'things to do']
        transportation_keywords = [
            'ƒëi ƒë·∫øn', 'di chuy·ªÉn', 'chi ph√≠ ƒëi', 'v√© xe', 'v√© m√°y bay',
            'c√°ch ƒëi', 'ƒë∆∞·ªùng ƒëi', 'b·∫±ng ph∆∞∆°ng ti·ªán', 'ph∆∞∆°ng ti·ªán n√†o',
            'how to go', 'cost to travel', 'transport', 'transportation'
        ]
        price_keywords = ['r·∫ª nh·∫•t', 'gi√° r·∫ª nh·∫•t', 'cheap', 'lowest price', 'budget']
        
        # X√°c ƒë·ªãnh topic
        topic = 'general'
        info_type = 'description'

        if any(keyword in message_lower for keyword in destination_keywords):
            topic = 'destinations'
        elif any(keyword in message_lower for keyword in culture_keywords):
            topic = 'culture'
        elif any(keyword in message_lower for keyword in cuisine_keywords):
            topic = 'cuisine'
        elif any(keyword in message_lower for keyword in hotel_keywords):
            topic = 'hotels'
            if any(pk in message_lower for pk in price_keywords):
                info_type = 'lowest_price'
        elif any(keyword in message_lower for keyword in restaurant_keywords):
            topic = 'restaurants'
        elif any(keyword in message_lower for keyword in activity_keywords):
            topic = 'activities'
        elif any(keyword in message_lower for keyword in transportation_keywords):
            topic = 'transportation'

        # Tr√≠ch xu·∫•t t·ª´ kh√≥a ƒë∆°n gi·∫£n
        words = message_lower.split()
        keywords = [word for word in words if len(word) > 2 and word not in ['the', 'and', 'or', 'but', 'v·ªõi', 'c·ªßa', 'trong', 'n√†o', 'g√¨']]

        return {
            "topic": topic,
            "origin": "TP.H·ªì Ch√≠ Minh" if language == "vi" else "Ho Chi Minh City",
            "destination": keywords[-1] if keywords else "",
            "keywords": keywords[:3],
            "info_type": info_type,
            "language": language
        }


    def generate_response(self, user_message: str, search_results: List[Dict[str, Any]], language: str = 'vi') -> str:
        """T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm"""
        if not search_results:
            if language == 'vi':
                return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c ƒëi·ªÉm du l·ªãch, vƒÉn h√≥a, ho·∫∑c ·∫©m th·ª±c Vi·ªát Nam kh√°c kh√¥ng?"
            else:
                return "Sorry, I couldn't find relevant information for your question. Could you ask about other Vietnamese tourist destinations, culture, or cuisine?"
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho prompt
        data_context = json.dumps(search_results, ensure_ascii=False, indent=2, default=str)
        
        if language == 'vi':
            prompt = f"""
            D·ª±a tr√™n c√¢u h·ªèi: "{user_message}"
            V√† d·ªØ li·ªáu t√¨m ƒë∆∞·ª£c: {data_context}
            
            H√£y t·∫°o m·ªôt c√¢u tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát. 
            Y√™u c·∫ßu format:
            - D√πng emoji ph√π h·ª£p (üó∫Ô∏è cho ƒëi·ªÉm ƒë·∫øn, üçú cho m√≥n ƒÉn, üéâ cho l·ªÖ h·ªôi, üè® cho kh√°ch s·∫°n, üçΩÔ∏è cho nh√† h√†ng, üöå cho ph∆∞∆°ng ti·ªán üèûÔ∏è cho ho·∫°t ƒë·ªông).
            - Tr√¨nh b√†y r√µ r√†ng v·ªõi ti√™u ƒë·ªÅ in ƒë·∫≠m, g·∫°ch ƒë·∫ßu d√≤ng ho·∫∑c xu·ªëng d√≤ng d·ªÖ ƒë·ªçc.
            - Bao g·ªìm:
            ‚Ä¢ Th√¥ng tin ch√≠nh t·ª´ d·ªØ li·ªáu
            ‚Ä¢ Chi ti·∫øt h·ªØu √≠ch (gi√° c·∫£, th·ªùi gian, ƒë·ªãa ƒëi·ªÉm n·∫øu c√≥)
            ‚Ä¢ G·ª£i √Ω ho·∫∑c l·ªùi khuy√™n n·∫øu ph√π h·ª£p
            - Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
            
            Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin trong d·ªØ li·ªáu ƒë√£ cung c·∫•p.
            """
        else:
            prompt = f"""
            Based on the question: "{user_message}"
            And the found data: {data_context}
            
            Please create a natural, friendly and helpful response in English.
            Formatting requirements:
            - Use suitable emojis (üó∫Ô∏è for destinations, üçú for food, üéâ for festivals, üè® for hotels, üçΩÔ∏è for restaurants, üöå for transportation üèûÔ∏è for activities).
            - Structure clearly with bold headings, bullet points or line breaks.
            - Include:
            ‚Ä¢ Main information from the data
            ‚Ä¢ Useful details (price, time, location if available)
            ‚Ä¢ Suggestions or advice if appropriate
            - Keep the response concise but informative
            
            Only use information from the provided data.
            """
            
        try:
            response = self.model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            print(f"Gemini response generation error: {e}")
            if language == 'vi':
                return "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi t·∫°o ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau."
            else:
                return "Sorry, I encountered an issue generating a response. Please try again later."
    
    def generate_recommendations(self, topic: str, language: str = 'vi') -> str:
        """T·∫°o g·ª£i √Ω chung"""
        if language == 'vi':
            suggestions = {
                'destinations': "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: V·ªãnh H·∫° Long, Ph·ªë c·ªï H·ªôi An, Sapa, ho·∫∑c c√°c ƒëi·ªÉm du l·ªãch kh√°c.",
                'culture': "B·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ: T·∫øt Nguy√™n ƒê√°n, m√∫a r·ªëi n∆∞·ªõc, ho·∫∑c c√°c l·ªÖ h·ªôi truy·ªÅn th·ªëng.",
                'cuisine': "H√£y kh√°m ph√°: Ph·ªü, b√°nh m√¨, ch·∫£ c√° L√£ V·ªçng, ho·∫∑c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n kh√°c.",
                'hotels': "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: c√°c kh√°ch s·∫°n n·ªïi ti·∫øng, khu ngh·ªâ d∆∞·ª°ng, ho·∫∑c ch·ªó ·ªü ph√π h·ª£p v·ªõi ng√¢n s√°ch c·ªßa b·∫°n.",
                'restaurants': "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: c√°c nh√† h√†ng n·ªïi ti·∫øng, qu√°n ƒÉn ƒë·ªãa ph∆∞∆°ng, ho·∫∑c n∆°i th∆∞·ªüng th·ª©c ·∫©m th·ª±c ƒë·∫∑c s·∫Øc.",
                'transportation': "B·∫°n c√≥ th·ªÉ h·ªèi: Chi ph√≠ ƒëi t·ª´ TP.HCM ƒë·∫øn ƒê√† L·∫°t, Ph√∫ Qu·ªëc, Nha Trang‚Ä¶",
                'activities': "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: du thuy·ªÅn ng·∫Øm c·∫£nh, trekking, ch√®o kayak, ho·∫∑c c√°c ho·∫°t ƒë·ªông kh√°c."
            }
        else:
            suggestions = {
                'destinations': "You can ask about: Ha Long Bay, Hoi An Ancient Town, Sapa, or other tourist destinations.",
                'culture': "You can learn about: Lunar New Year, water puppetry, or traditional festivals.",
                'cuisine': "Explore: Pho, Vietnamese sandwich, Cha Ca La Vong, or other specialty dishes.",
                'hotels': "You can ask about: popular hotels, resorts, or accommodations that fit your budget.",
                'restaurants': "You can ask about: famous restaurants, local eateries, or places to enjoy unique cuisine.",
                'transportation': "You can ask: Cost to travel from Ho Chi Minh City to Da Lat, Phu Quoc, Nha Trang‚Ä¶",
                'activities': "You can ask about: scenic cruises, trekking, kayaking, or other activities."
            }
        
        return suggestions.get(topic, suggestions['destinations'])
